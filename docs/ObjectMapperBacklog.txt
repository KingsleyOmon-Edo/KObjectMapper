MVP
----
Features
---------
- Update README
- Setup issues list
- Code samples and examples
- Support for .NET 6.0

- Mapping to new, non-existent instances - SINGLE OBJECTS
- Mapping to new, non-existent instances - COLLECTIONS (IEnumerable<T>)
    - Do more robust implementations following the POCs - Single and colletion instances.
    - Unit test thoroughly
    - As we are still in prerelease, review or redesign the APIs if needed
  

//  ToDo: Tests for MapFrom<TSource>(TSource source)
//	TTarget target = _mapper.MapFrom<TSource>(TSource source)
//	TSource source = _mapper.MapTo<TTarget>(TTarget target)

//  ToDo: Tests for MapFrom<TSource, TTarget>(TSource source, TTarget), MapTo(o,o)
//  ToDo: Tests for MapTo(object source, object target)
//  ToDo: Tests for MapTo<TSource, TTarget>(TSource source, TTarget target)
//  Todo: Review the ApplyDiffs signature to support two different types arguments.


Product Backlog - (Pending Features)
-------------------------------------
- Review code and fix any issues in files.
- Review and cover ALL object extension methods with protective tests.
- Mapping collections (Detailed implementation)
- Mapping between collections of dissimilar types
- Keep Extensions local
- Should return the mapped instance instead
	var target = mapper.Map<T>(source);
	var target = mapper.MapFrom<T>(source)
	var target = mapper.MapFrom(source);
- Review the semantics of the MapTo<T>() and MapFrom<T>() methods
- Mapping collections
- Support for .NET 5.0, 3.1, 4.0

COMPLETED FEATURES
-------------------
- POC: Basic mapping between two objects of same type. --- DONE
- Test strongly types mapping --- DONE
- Alternative signatures
	1 - MapTo<T>(T target)	--- DONE
	2 - MapFrom<T>(T source) --- DONE
	3 - Map(object source, object Target) --- DONE
	4 - MapTo(object source, object target) --- DONE
	5 - MapFrom(object source) --- DONE
	6 - Surface MapTo<T> and MapFrom<T> methods to any arbitrary object via extension method for the generic variants --- DONE

- Map between two objects of dissimilar types.
- MapTo(), MapFrom()
- Surface Map methods to any arbitray object via extension methods
- Refactoring: Group funtionally related test methods together refactor to separate classes
- Separate MapToOfT from the lot into their own class
- Remove extra fluff
- POC of mapping to new object instances. DONE
- POC of mapping to to new IEnumeable<T> instances. DONE

Check:
------
Object => Mapper => MappingService

- Simple Object-to-object mapping
	- Dissimilar types DONE
	- MapTo()
	- MapTo<TTarget>()
	- MapFrom()
	- MapFrom<TSource>()
	- Map()
	- Map<TSource, TTarget>() 
	
- Simple collection mapping
	- Collection of dissimilar types

- Good unit test coverage

- Documentation


COMPLETED TASKS
---------------
//  TODO: Test predicate function guard clauses.
//  private static bool ArePropValuesDifferent<T>(T sourceObject, PropertyInfo sourceProp, T targetObject, PropertyInfo targetProp)
//  Test when sourceProp is null (DONE)
//  Test when targetProp is null (DONE)
//  Test when sourceProp.Name is not equal to targetProp.Name (DONE)
//  Test when sourcePropType is not equal to targetPropType (DONE)        
//  Test when source object is null (DONe)
//  Test when target object is null (DONE)
//  TODO: Isolate predicate function for reuse. (DONE)
//  ToDo: By TDD implement guard clause for null source object for MapTo().
//  ToDo: By TDD implement guard clause for null target object for MapTo().

//  ToDo: POC: Setup a sample, install the nuget and test. Fix any issues. DONE.
//  ToDo: REFACTOR: Push some of ObjectExtension methods into a service class and consume by object composition.
//  ToDo: Validate types of source objects
//  ToDo: Validate types of target objects
//  ToDo: Validate both types when different types are supplied for each Map<TSource, TTarget>(TSource source, TTarget target)
//  ToDo: Validate the type ignorance still works.
//  ToDo: Tests for MapFrom<TSource>(TSource source)